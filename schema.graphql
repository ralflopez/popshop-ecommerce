### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AssetAllocationOutput {
  assetId: String!
  average: Float!
  symbol: String!
  total: Float!
}

enum AssetType {
  CRYPTO
  FIAT
}

"""Return data for authenticated users"""
type AuthPayload {
  token: String!
  user: User!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

"""Required data to login the user"""
input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  """Buy operation of a certain cryptocurrency"""
  buy(amount: Float!, assetId: String!): Transaction
  deleteUser(id: ID!): User

  """deposit operation of a certain cryptocurrency"""
  deposit(amount: Float!): Transaction
  login(data: LoginInput!): AuthPayload

  """sell operation of a certain cryptocurrency"""
  sell(amount: Float!, assetId: String!): Transaction
  signup(data: SignupInput!): AuthPayload
  updateUser(data: UserUpdateInput!, id: ID!): User

  """withdraw operation of a certain cryptocurrency"""
  withdraw(amount: Float!): Transaction
}

type PortfolioOutput {
  allocation: [AssetAllocationOutput!]!
  buyingPower: Float!
}

type Query {
  getMyUser: User
  getUser(id: ID!): User
  getUsers: [User!]!
  logout: Boolean

  """a summary of all assets owned by the user"""
  myPortfolio: PortfolioOutput
  refreshToken: AuthPayload

  """A query to test if endpoint can be reached"""
  test: String

  """Returns all transactions in the ledger"""
  transactions: [Transaction!]!
}

"""Role of the User"""
enum Role {
  ADMIN
  USER
}

"""Required data to make an account"""
input SignupInput {
  email: String!
  name: String!
  password: String!
}

"""Keep tracks of buy, sell, deposit and withdraw actions of a user"""
type Transaction {
  amount: Float!
  assetId: String!
  assetType: AssetType!
  id: ID!
  symbol: String!
  timestamp: DateTime!
  type: TransactionType!
  user: User!
  userId: String!
  valueUsd: Float!
}

enum TransactionType {
  BUY
  DEPOSIT
  SELL
  WITHDRAW
}

"""User model from the database"""
type User {
  email: EmailAddress!
  id: ID!
  name: String!
  role: Role!
}

input UserUpdateInput {
  email: EmailAddress!
  name: String!
  password: String!
}